"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
const UserValidator_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Validators/UserValidator"));
const USER_PER_PAGE = 2;
class UsersController {
    async index({ request, response }) {
        const page = request.input("page", 1);
        const pagination = await User_1.default.query()
            .select(["id", "name", "email"])
            .paginate(page, USER_PER_PAGE);
        return response.json(pagination.all());
    }
    async create({ request, response }) {
        try {
            const trustedData = await request.validate(UserValidator_1.default);
            const ret = await User_1.default.create(trustedData);
            return response.status(201).json(ret);
        }
        catch (error) {
            return response.status(400).json({ error: error.messages || error });
        }
    }
    async show({ params, response }) {
        const paramId = params.id;
        try {
            const data = await User_1.default.query()
                .where("id", paramId)
                .preload("tasks")
                .select();
            return response.status(201).json(data);
        }
        catch (error) {
            return response.status(400).json({ error: error.messages || error });
        }
    }
}
exports.default = UsersController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXNlcnNDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiVXNlcnNDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsaUZBQW1DO0FBQ25DLHVHQUE4RDtBQVc5RCxNQUFNLGFBQWEsR0FBRyxDQUFDLENBQUM7QUFFeEIsTUFBcUIsZUFBZTtJQUMzQixLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBdUI7UUFDM0QsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFdEMsTUFBTSxVQUFVLEdBQUcsTUFBTSxjQUFJLENBQUMsS0FBSyxFQUFFO2FBQ2xDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7YUFDL0IsUUFBUSxDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQztRQUNqQyxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVNLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUF1QjtRQUM1RCxJQUFJO1lBQ0YsTUFBTSxXQUFXLEdBQUcsTUFBTSxPQUFPLENBQUMsUUFBUSxDQUFDLHVCQUFrQixDQUFDLENBQUM7WUFDL0QsTUFBTSxHQUFHLEdBQUcsTUFBTSxjQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBRTNDLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDdkM7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLFFBQVEsSUFBSSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1NBQ3RFO0lBQ0gsQ0FBQztJQUVNLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUF1QjtRQUN6RCxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDO1FBRTFCLElBQUk7WUFDRixNQUFNLElBQUksR0FBRyxNQUFNLGNBQUksQ0FBQyxLQUFLLEVBQUU7aUJBQzVCLEtBQUssQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDO2lCQUNwQixPQUFPLENBQUMsT0FBTyxDQUFDO2lCQUNoQixNQUFNLEVBQUUsQ0FBQztZQUVaLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDeEM7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLFFBQVEsSUFBSSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1NBQ3RFO0lBQ0gsQ0FBQztDQUNGO0FBbkNELGtDQW1DQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgSHR0cENvbnRleHRDb250cmFjdCB9IGZyb20gXCJAaW9jOkFkb25pcy9Db3JlL0h0dHBDb250ZXh0XCI7XG5pbXBvcnQgVXNlciBmcm9tIFwiQXBwL01vZGVscy9Vc2VyXCI7XG5pbXBvcnQgVXNlclN0b3JlVmFsaWRhdG9yIGZyb20gXCJBcHAvVmFsaWRhdG9ycy9Vc2VyVmFsaWRhdG9yXCI7XG5pbXBvcnQgVGFzayBmcm9tIFwiQXBwL01vZGVscy9UYXNrXCI7XG5cbi8qXG5cblJvdXRlLnBvc3QoJy91c2VycycsICdVc2Vyc0NvbnRyb2xsZXIuY3JlYXRlJylcblJvdXRlLmdldCgnL3VzZXJzJywgJ1VzZXJzQ29udHJvbGxlci5pbmRleCcpXG5Sb3V0ZS5wb3N0KCcvdXNlcnMvOmlkJywgJ1VzZXJzQ29udHJvbGxlci5zaG93JylcblxuKi9cblxuY29uc3QgVVNFUl9QRVJfUEFHRSA9IDI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXJzQ29udHJvbGxlciB7XG4gIHB1YmxpYyBhc3luYyBpbmRleCh7IHJlcXVlc3QsIHJlc3BvbnNlIH06IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcbiAgICBjb25zdCBwYWdlID0gcmVxdWVzdC5pbnB1dChcInBhZ2VcIiwgMSk7XG5cbiAgICBjb25zdCBwYWdpbmF0aW9uID0gYXdhaXQgVXNlci5xdWVyeSgpXG4gICAgICAuc2VsZWN0KFtcImlkXCIsIFwibmFtZVwiLCBcImVtYWlsXCJdKVxuICAgICAgLnBhZ2luYXRlKHBhZ2UsIFVTRVJfUEVSX1BBR0UpO1xuICAgIHJldHVybiByZXNwb25zZS5qc29uKHBhZ2luYXRpb24uYWxsKCkpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGNyZWF0ZSh7IHJlcXVlc3QsIHJlc3BvbnNlIH06IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdHJ1c3RlZERhdGEgPSBhd2FpdCByZXF1ZXN0LnZhbGlkYXRlKFVzZXJTdG9yZVZhbGlkYXRvcik7XG4gICAgICBjb25zdCByZXQgPSBhd2FpdCBVc2VyLmNyZWF0ZSh0cnVzdGVkRGF0YSk7XG5cbiAgICAgIHJldHVybiByZXNwb25zZS5zdGF0dXMoMjAxKS5qc29uKHJldCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiByZXNwb25zZS5zdGF0dXMoNDAwKS5qc29uKHsgZXJyb3I6IGVycm9yLm1lc3NhZ2VzIHx8IGVycm9yIH0pO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBzaG93KHsgcGFyYW1zLCByZXNwb25zZSB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgY29uc3QgcGFyYW1JZCA9IHBhcmFtcy5pZDtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgVXNlci5xdWVyeSgpXG4gICAgICAgIC53aGVyZShcImlkXCIsIHBhcmFtSWQpXG4gICAgICAgIC5wcmVsb2FkKFwidGFza3NcIilcbiAgICAgICAgLnNlbGVjdCgpO1xuXG4gICAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzKDIwMSkuanNvbihkYXRhKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1cyg0MDApLmpzb24oeyBlcnJvcjogZXJyb3IubWVzc2FnZXMgfHwgZXJyb3IgfSk7XG4gICAgfVxuICB9XG59XG4iXX0=