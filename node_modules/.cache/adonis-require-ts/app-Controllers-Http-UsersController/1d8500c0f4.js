"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
const UserValidator_1 = global[Symbol.for('ioc.use')]("App/Validators/UserValidator");
const USER_PER_PAGE = 2;
class UsersController {
    async index({ request, response }) {
        const page = request.input("page", 1);
        const pagination = await User_1.default.query()
            .select(["id", "name", "email"])
            .paginate(page, USER_PER_PAGE);
        return response.json(pagination);
    }
    async store({ request, response }) {
        try {
            const trustedData = await request.validate(UserValidator_1.UserStoreValidator);
            const ret = await User_1.default.create(trustedData);
            return response.status(201).json(ret);
        }
        catch (error) {
            return response.status(400).json({ error: error.messages || error });
        }
    }
    async update({ request, response }) {
        const trustedData = await request.validate(UserValidator_1.UserUpdateValidator);
        try {
            await User_1.default.query().where("id", trustedData.id).update(trustedData);
            return response.ok(trustedData);
        }
        catch (error) {
            return response.badRequest("Failed to update user");
        }
    }
    async show({ params, response }) {
        const paramId = params.id;
        try {
            const data = await User_1.default.query()
                .where("id", paramId)
                .preload("tasks")
                .select();
            return response.ok(data);
        }
        catch (error) {
            return response.badRequest({ error: error.messages || error });
        }
    }
    async delete({ request, response }) {
        const trustedData = await request.validate(UserValidator_1.UserUpdateValidator);
        try {
            await User_1.default.query().where("id", trustedData.id).delete();
            return response.ok("User deleted successfully");
        }
        catch (error) {
            return response.badRequest("Failed to delete user");
        }
    }
}
exports.default = UsersController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXNlcnNDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiVXNlcnNDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsaUZBQW1DO0FBQ25DLHNGQUdzQztBQVV0QyxNQUFNLGFBQWEsR0FBRyxDQUFDLENBQUM7QUFFeEIsTUFBcUIsZUFBZTtJQUMzQixLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBdUI7UUFDM0QsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFdEMsTUFBTSxVQUFVLEdBQUcsTUFBTSxjQUFJLENBQUMsS0FBSyxFQUFFO2FBQ2xDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7YUFDL0IsUUFBUSxDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQztRQUNqQyxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVNLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUF1QjtRQUMzRCxJQUFJO1lBQ0YsTUFBTSxXQUFXLEdBQUcsTUFBTSxPQUFPLENBQUMsUUFBUSxDQUFDLGtDQUFrQixDQUFDLENBQUM7WUFDL0QsTUFBTSxHQUFHLEdBQUcsTUFBTSxjQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQzNDLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDdkM7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLFFBQVEsSUFBSSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1NBQ3RFO0lBQ0gsQ0FBQztJQUVNLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUF1QjtRQUM1RCxNQUFNLFdBQVcsR0FBRyxNQUFNLE9BQU8sQ0FBQyxRQUFRLENBQUMsbUNBQW1CLENBQUMsQ0FBQztRQUNoRSxJQUFJO1lBQ0YsTUFBTSxjQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ25FLE9BQU8sUUFBUSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUNqQztRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ2QsT0FBTyxRQUFRLENBQUMsVUFBVSxDQUFDLHVCQUF1QixDQUFDLENBQUM7U0FDckQ7SUFDSCxDQUFDO0lBRU0sS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQXVCO1FBQ3pELE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUM7UUFFMUIsSUFBSTtZQUNGLE1BQU0sSUFBSSxHQUFHLE1BQU0sY0FBSSxDQUFDLEtBQUssRUFBRTtpQkFDNUIsS0FBSyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUM7aUJBQ3BCLE9BQU8sQ0FBQyxPQUFPLENBQUM7aUJBQ2hCLE1BQU0sRUFBRSxDQUFDO1lBRVosT0FBTyxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzFCO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxPQUFPLFFBQVEsQ0FBQyxVQUFVLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLFFBQVEsSUFBSSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1NBQ2hFO0lBQ0gsQ0FBQztJQUVNLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUF1QjtRQUM1RCxNQUFNLFdBQVcsR0FBRyxNQUFNLE9BQU8sQ0FBQyxRQUFRLENBQUMsbUNBQW1CLENBQUMsQ0FBQztRQUNoRSxJQUFJO1lBQ0YsTUFBTSxjQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDeEQsT0FBTyxRQUFRLENBQUMsRUFBRSxDQUFDLDJCQUEyQixDQUFDLENBQUM7U0FDakQ7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLE9BQU8sUUFBUSxDQUFDLFVBQVUsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1NBQ3JEO0lBQ0gsQ0FBQztDQUNGO0FBdERELGtDQXNEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgSHR0cENvbnRleHRDb250cmFjdCB9IGZyb20gXCJAaW9jOkFkb25pcy9Db3JlL0h0dHBDb250ZXh0XCI7XHJcbmltcG9ydCBVc2VyIGZyb20gXCJBcHAvTW9kZWxzL1VzZXJcIjtcclxuaW1wb3J0IHtcclxuICBVc2VyU3RvcmVWYWxpZGF0b3IsXHJcbiAgVXNlclVwZGF0ZVZhbGlkYXRvcixcclxufSBmcm9tIFwiQXBwL1ZhbGlkYXRvcnMvVXNlclZhbGlkYXRvclwiO1xyXG5cclxuLypcclxuXHJcblJvdXRlLnBvc3QoJy91c2VycycsICdVc2Vyc0NvbnRyb2xsZXIuY3JlYXRlJylcclxuUm91dGUuZ2V0KCcvdXNlcnMnLCAnVXNlcnNDb250cm9sbGVyLmluZGV4JylcclxuUm91dGUucG9zdCgnL3VzZXJzLzppZCcsICdVc2Vyc0NvbnRyb2xsZXIuc2hvdycpXHJcblxyXG4qL1xyXG5cclxuY29uc3QgVVNFUl9QRVJfUEFHRSA9IDI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVc2Vyc0NvbnRyb2xsZXIge1xyXG4gIHB1YmxpYyBhc3luYyBpbmRleCh7IHJlcXVlc3QsIHJlc3BvbnNlIH06IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcclxuICAgIGNvbnN0IHBhZ2UgPSByZXF1ZXN0LmlucHV0KFwicGFnZVwiLCAxKTtcclxuXHJcbiAgICBjb25zdCBwYWdpbmF0aW9uID0gYXdhaXQgVXNlci5xdWVyeSgpXHJcbiAgICAgIC5zZWxlY3QoW1wiaWRcIiwgXCJuYW1lXCIsIFwiZW1haWxcIl0pXHJcbiAgICAgIC5wYWdpbmF0ZShwYWdlLCBVU0VSX1BFUl9QQUdFKTtcclxuICAgIHJldHVybiByZXNwb25zZS5qc29uKHBhZ2luYXRpb24pO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGFzeW5jIHN0b3JlKHsgcmVxdWVzdCwgcmVzcG9uc2UgfTogSHR0cENvbnRleHRDb250cmFjdCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgdHJ1c3RlZERhdGEgPSBhd2FpdCByZXF1ZXN0LnZhbGlkYXRlKFVzZXJTdG9yZVZhbGlkYXRvcik7XHJcbiAgICAgIGNvbnN0IHJldCA9IGF3YWl0IFVzZXIuY3JlYXRlKHRydXN0ZWREYXRhKTtcclxuICAgICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1cygyMDEpLmpzb24ocmV0KTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHJldHVybiByZXNwb25zZS5zdGF0dXMoNDAwKS5qc29uKHsgZXJyb3I6IGVycm9yLm1lc3NhZ2VzIHx8IGVycm9yIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGFzeW5jIHVwZGF0ZSh7IHJlcXVlc3QsIHJlc3BvbnNlIH06IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcclxuICAgIGNvbnN0IHRydXN0ZWREYXRhID0gYXdhaXQgcmVxdWVzdC52YWxpZGF0ZShVc2VyVXBkYXRlVmFsaWRhdG9yKTtcclxuICAgIHRyeSB7XHJcbiAgICAgIGF3YWl0IFVzZXIucXVlcnkoKS53aGVyZShcImlkXCIsIHRydXN0ZWREYXRhLmlkKS51cGRhdGUodHJ1c3RlZERhdGEpO1xyXG4gICAgICByZXR1cm4gcmVzcG9uc2Uub2sodHJ1c3RlZERhdGEpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgcmV0dXJuIHJlc3BvbnNlLmJhZFJlcXVlc3QoXCJGYWlsZWQgdG8gdXBkYXRlIHVzZXJcIik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYXN5bmMgc2hvdyh7IHBhcmFtcywgcmVzcG9uc2UgfTogSHR0cENvbnRleHRDb250cmFjdCkge1xyXG4gICAgY29uc3QgcGFyYW1JZCA9IHBhcmFtcy5pZDtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgVXNlci5xdWVyeSgpXHJcbiAgICAgICAgLndoZXJlKFwiaWRcIiwgcGFyYW1JZClcclxuICAgICAgICAucHJlbG9hZChcInRhc2tzXCIpXHJcbiAgICAgICAgLnNlbGVjdCgpO1xyXG5cclxuICAgICAgcmV0dXJuIHJlc3BvbnNlLm9rKGRhdGEpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgcmV0dXJuIHJlc3BvbnNlLmJhZFJlcXVlc3QoeyBlcnJvcjogZXJyb3IubWVzc2FnZXMgfHwgZXJyb3IgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYXN5bmMgZGVsZXRlKHsgcmVxdWVzdCwgcmVzcG9uc2UgfTogSHR0cENvbnRleHRDb250cmFjdCkge1xyXG4gICAgY29uc3QgdHJ1c3RlZERhdGEgPSBhd2FpdCByZXF1ZXN0LnZhbGlkYXRlKFVzZXJVcGRhdGVWYWxpZGF0b3IpO1xyXG4gICAgdHJ5IHtcclxuICAgICAgYXdhaXQgVXNlci5xdWVyeSgpLndoZXJlKFwiaWRcIiwgdHJ1c3RlZERhdGEuaWQpLmRlbGV0ZSgpO1xyXG4gICAgICByZXR1cm4gcmVzcG9uc2Uub2soXCJVc2VyIGRlbGV0ZWQgc3VjY2Vzc2Z1bGx5XCIpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgcmV0dXJuIHJlc3BvbnNlLmJhZFJlcXVlc3QoXCJGYWlsZWQgdG8gZGVsZXRlIHVzZXJcIik7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==