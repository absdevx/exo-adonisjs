"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Task_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Task"));
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
const TaskValidator_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Validators/TaskValidator"));
class TasksController {
    async store({ request, response }) {
        const trustedData = await request.validate(TaskValidator_1.default);
        try {
            const task = await Task_1.default.create(trustedData);
            return response.json(task);
        }
        catch (error) {
            return response.status(400).json({ error: error.messages || error });
        }
    }
    async index({ params, response }) {
        const paramId = params.id;
        const tasks = await Task_1.default.query().where("user_id", paramId);
        return response.json(tasks);
    }
    async getTasks({ response }) {
        const tasks = await Task_1.default.all();
        return response.json(tasks);
    }
    async getUserByTask({ params, response }) {
        const paramId = params.id;
        const task = await User_1.default.query()
            .join("tasks", "tasks.user_id", "users.id")
            .where("tasks.id", paramId)
            .select();
        return response.json(task);
    }
}
exports.default = TasksController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFza3NDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiVGFza3NDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsaUZBQW1DO0FBQ25DLGlGQUFtQztBQUNuQyx1R0FBeUQ7QUFFekQsTUFBcUIsZUFBZTtJQUMzQixLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBdUI7UUFDM0QsTUFBTSxXQUFXLEdBQUcsTUFBTSxPQUFPLENBQUMsUUFBUSxDQUFDLHVCQUFhLENBQUMsQ0FBQztRQUMxRCxJQUFJO1lBQ0YsTUFBTSxJQUFJLEdBQUcsTUFBTSxjQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBRTVDLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM1QjtRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ2QsT0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsUUFBUSxJQUFJLEtBQUssRUFBRSxDQUFDLENBQUM7U0FDdEU7SUFDSCxDQUFDO0lBRU0sS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQXVCO1FBQzFELE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUM7UUFDMUIsTUFBTSxLQUFLLEdBQUcsTUFBTSxjQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUMzRCxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVNLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRSxRQUFRLEVBQXVCO1FBQ3JELE1BQU0sS0FBSyxHQUFHLE1BQU0sY0FBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQy9CLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRU0sS0FBSyxDQUFDLGFBQWEsQ0FBQyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQXVCO1FBQ2xFLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUM7UUFDMUIsTUFBTSxJQUFJLEdBQUcsTUFBTSxjQUFJLENBQUMsS0FBSyxFQUFFO2FBQzVCLElBQUksQ0FBQyxPQUFPLEVBQUUsZUFBZSxFQUFFLFVBQVUsQ0FBQzthQUMxQyxLQUFLLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQzthQUMxQixNQUFNLEVBQUUsQ0FBQztRQUNaLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QixDQUFDO0NBQ0Y7QUEvQkQsa0NBK0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBIdHRwQ29udGV4dENvbnRyYWN0IH0gZnJvbSBcIkBpb2M6QWRvbmlzL0NvcmUvSHR0cENvbnRleHRcIjtcbmltcG9ydCBUYXNrIGZyb20gXCJBcHAvTW9kZWxzL1Rhc2tcIjtcbmltcG9ydCBVc2VyIGZyb20gXCJBcHAvTW9kZWxzL1VzZXJcIjtcbmltcG9ydCBUYXNrVmFsaWRhdG9yIGZyb20gXCJBcHAvVmFsaWRhdG9ycy9UYXNrVmFsaWRhdG9yXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRhc2tzQ29udHJvbGxlciB7XG4gIHB1YmxpYyBhc3luYyBzdG9yZSh7IHJlcXVlc3QsIHJlc3BvbnNlIH06IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcbiAgICBjb25zdCB0cnVzdGVkRGF0YSA9IGF3YWl0IHJlcXVlc3QudmFsaWRhdGUoVGFza1ZhbGlkYXRvcik7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHRhc2sgPSBhd2FpdCBUYXNrLmNyZWF0ZSh0cnVzdGVkRGF0YSk7XG5cbiAgICAgIHJldHVybiByZXNwb25zZS5qc29uKHRhc2spO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzKDQwMCkuanNvbih7IGVycm9yOiBlcnJvci5tZXNzYWdlcyB8fCBlcnJvciB9KTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgaW5kZXgoeyBwYXJhbXMsIHJlc3BvbnNlIH06IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcbiAgICBjb25zdCBwYXJhbUlkID0gcGFyYW1zLmlkO1xuICAgIGNvbnN0IHRhc2tzID0gYXdhaXQgVGFzay5xdWVyeSgpLndoZXJlKFwidXNlcl9pZFwiLCBwYXJhbUlkKTtcbiAgICByZXR1cm4gcmVzcG9uc2UuanNvbih0YXNrcyk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZ2V0VGFza3MoeyByZXNwb25zZSB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgY29uc3QgdGFza3MgPSBhd2FpdCBUYXNrLmFsbCgpO1xuICAgIHJldHVybiByZXNwb25zZS5qc29uKHRhc2tzKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBnZXRVc2VyQnlUYXNrKHsgcGFyYW1zLCByZXNwb25zZSB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgY29uc3QgcGFyYW1JZCA9IHBhcmFtcy5pZDtcbiAgICBjb25zdCB0YXNrID0gYXdhaXQgVXNlci5xdWVyeSgpXG4gICAgICAuam9pbihcInRhc2tzXCIsIFwidGFza3MudXNlcl9pZFwiLCBcInVzZXJzLmlkXCIpXG4gICAgICAud2hlcmUoXCJ0YXNrcy5pZFwiLCBwYXJhbUlkKVxuICAgICAgLnNlbGVjdCgpO1xuICAgIHJldHVybiByZXNwb25zZS5qc29uKHRhc2spO1xuICB9XG59XG4iXX0=