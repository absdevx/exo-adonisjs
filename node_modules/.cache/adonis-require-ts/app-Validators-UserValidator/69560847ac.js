"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserUpdateValidator = exports.UserStoreValidator = void 0;
const Validator_1 = global[Symbol.for('ioc.use')]("Adonis/Core/Validator");
class UserStoreValidator {
    constructor(ctx) {
        this.ctx = ctx;
        this.schema = Validator_1.schema.create({
            name: Validator_1.schema.string({}, [
                Validator_1.rules.minLength(3),
                Validator_1.rules.unique({ table: "users", column: "name" }),
            ]),
            email: Validator_1.schema.string({}, [
                Validator_1.rules.email(),
                Validator_1.rules.unique({ table: "users", column: "email" }),
            ]),
        });
        this.messages = {
            "name.minLength": "La taille minimale est de 3 caractères",
            "email.email": "Le format de votre email est incorrect",
            "email.unique": "Ce email existe déja",
            "name.unique": "Ce nom existe déja",
        };
    }
}
exports.UserStoreValidator = UserStoreValidator;
class UserUpdateValidator {
    constructor(ctx) {
        this.ctx = ctx;
        this.schema = Validator_1.schema.create({
            id: Validator_1.schema.number([
                Validator_1.rules.required(),
                Validator_1.rules.exists({ table: "users", column: "id" }),
            ]),
            name: Validator_1.schema.string.optional({}, [Validator_1.rules.minLength(3)]),
            email: Validator_1.schema.string.optional({}, [Validator_1.rules.email()]),
        });
        this.messages = {
            "id.*": "L'identifiant est invalide",
            "id.required": "L'identifiant est requis",
            "name.minLength": "La taille minimale est de 3 caractères",
            "email.exists": "L'email est invalide",
        };
    }
}
exports.UserUpdateValidator = UserUpdateValidator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXNlclZhbGlkYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlVzZXJWYWxpZGF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMkVBQTJFO0FBRzNFLE1BQWEsa0JBQWtCO0lBQzdCLFlBQXNCLEdBQXdCO1FBQXhCLFFBQUcsR0FBSCxHQUFHLENBQXFCO1FBRXZDLFdBQU0sR0FBRyxrQkFBTSxDQUFDLE1BQU0sQ0FBQztZQUM1QixJQUFJLEVBQUUsa0JBQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFO2dCQUN0QixpQkFBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xCLGlCQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUM7YUFDakQsQ0FBQztZQUNGLEtBQUssRUFBRSxrQkFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUU7Z0JBQ3ZCLGlCQUFLLENBQUMsS0FBSyxFQUFFO2dCQUNiLGlCQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLENBQUM7YUFDbEQsQ0FBQztTQUNILENBQUMsQ0FBQztRQUVJLGFBQVEsR0FBbUI7WUFDaEMsZ0JBQWdCLEVBQUUsd0NBQXdDO1lBQzFELGFBQWEsRUFBRSx3Q0FBd0M7WUFDdkQsY0FBYyxFQUFFLHNCQUFzQjtZQUN0QyxhQUFhLEVBQUUsb0JBQW9CO1NBQ3BDLENBQUM7SUFsQitDLENBQUM7Q0FtQm5EO0FBcEJELGdEQW9CQztBQUVELE1BQWEsbUJBQW1CO0lBQzlCLFlBQXNCLEdBQXdCO1FBQXhCLFFBQUcsR0FBSCxHQUFHLENBQXFCO1FBRXZDLFdBQU0sR0FBRyxrQkFBTSxDQUFDLE1BQU0sQ0FBQztZQUM1QixFQUFFLEVBQUUsa0JBQU0sQ0FBQyxNQUFNLENBQUM7Z0JBQ2hCLGlCQUFLLENBQUMsUUFBUSxFQUFFO2dCQUNoQixpQkFBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDO2FBQy9DLENBQUM7WUFDRixJQUFJLEVBQUUsa0JBQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEQsS0FBSyxFQUFFLGtCQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBSyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7U0FDbkQsQ0FBQyxDQUFDO1FBRUksYUFBUSxHQUFtQjtZQUNoQyxNQUFNLEVBQUUsNEJBQTRCO1lBQ3BDLGFBQWEsRUFBRSwwQkFBMEI7WUFDekMsZ0JBQWdCLEVBQUUsd0NBQXdDO1lBQzFELGNBQWMsRUFBRSxzQkFBc0I7U0FDdkMsQ0FBQztJQWhCK0MsQ0FBQztDQWlCbkQ7QUFsQkQsa0RBa0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2NoZW1hLCBDdXN0b21NZXNzYWdlcywgcnVsZXMgfSBmcm9tIFwiQGlvYzpBZG9uaXMvQ29yZS9WYWxpZGF0b3JcIjtcclxuaW1wb3J0IHR5cGUgeyBIdHRwQ29udGV4dENvbnRyYWN0IH0gZnJvbSBcIkBpb2M6QWRvbmlzL0NvcmUvSHR0cENvbnRleHRcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBVc2VyU3RvcmVWYWxpZGF0b3Ige1xyXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBjdHg6IEh0dHBDb250ZXh0Q29udHJhY3QpIHt9XHJcblxyXG4gIHB1YmxpYyBzY2hlbWEgPSBzY2hlbWEuY3JlYXRlKHtcclxuICAgIG5hbWU6IHNjaGVtYS5zdHJpbmcoe30sIFtcclxuICAgICAgcnVsZXMubWluTGVuZ3RoKDMpLFxyXG4gICAgICBydWxlcy51bmlxdWUoeyB0YWJsZTogXCJ1c2Vyc1wiLCBjb2x1bW46IFwibmFtZVwiIH0pLFxyXG4gICAgXSksXHJcbiAgICBlbWFpbDogc2NoZW1hLnN0cmluZyh7fSwgW1xyXG4gICAgICBydWxlcy5lbWFpbCgpLFxyXG4gICAgICBydWxlcy51bmlxdWUoeyB0YWJsZTogXCJ1c2Vyc1wiLCBjb2x1bW46IFwiZW1haWxcIiB9KSxcclxuICAgIF0pLFxyXG4gIH0pO1xyXG5cclxuICBwdWJsaWMgbWVzc2FnZXM6IEN1c3RvbU1lc3NhZ2VzID0ge1xyXG4gICAgXCJuYW1lLm1pbkxlbmd0aFwiOiBcIkxhIHRhaWxsZSBtaW5pbWFsZSBlc3QgZGUgMyBjYXJhY3TDqHJlc1wiLFxyXG4gICAgXCJlbWFpbC5lbWFpbFwiOiBcIkxlIGZvcm1hdCBkZSB2b3RyZSBlbWFpbCBlc3QgaW5jb3JyZWN0XCIsXHJcbiAgICBcImVtYWlsLnVuaXF1ZVwiOiBcIkNlIGVtYWlsIGV4aXN0ZSBkw6lqYVwiLFxyXG4gICAgXCJuYW1lLnVuaXF1ZVwiOiBcIkNlIG5vbSBleGlzdGUgZMOpamFcIixcclxuICB9O1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVXNlclVwZGF0ZVZhbGlkYXRvciB7XHJcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGN0eDogSHR0cENvbnRleHRDb250cmFjdCkge31cclxuXHJcbiAgcHVibGljIHNjaGVtYSA9IHNjaGVtYS5jcmVhdGUoe1xyXG4gICAgaWQ6IHNjaGVtYS5udW1iZXIoW1xyXG4gICAgICBydWxlcy5yZXF1aXJlZCgpLFxyXG4gICAgICBydWxlcy5leGlzdHMoeyB0YWJsZTogXCJ1c2Vyc1wiLCBjb2x1bW46IFwiaWRcIiB9KSxcclxuICAgIF0pLFxyXG4gICAgbmFtZTogc2NoZW1hLnN0cmluZy5vcHRpb25hbCh7fSwgW3J1bGVzLm1pbkxlbmd0aCgzKV0pLFxyXG4gICAgZW1haWw6IHNjaGVtYS5zdHJpbmcub3B0aW9uYWwoe30sIFtydWxlcy5lbWFpbCgpXSksXHJcbiAgfSk7XHJcblxyXG4gIHB1YmxpYyBtZXNzYWdlczogQ3VzdG9tTWVzc2FnZXMgPSB7XHJcbiAgICBcImlkLipcIjogXCJMJ2lkZW50aWZpYW50IGVzdCBpbnZhbGlkZVwiLFxyXG4gICAgXCJpZC5yZXF1aXJlZFwiOiBcIkwnaWRlbnRpZmlhbnQgZXN0IHJlcXVpc1wiLFxyXG4gICAgXCJuYW1lLm1pbkxlbmd0aFwiOiBcIkxhIHRhaWxsZSBtaW5pbWFsZSBlc3QgZGUgMyBjYXJhY3TDqHJlc1wiLFxyXG4gICAgXCJlbWFpbC5leGlzdHNcIjogXCJMJ2VtYWlsIGVzdCBpbnZhbGlkZVwiLFxyXG4gIH07XHJcbn1cclxuIl19